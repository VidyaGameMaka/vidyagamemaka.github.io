<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>VidyaGameMaka &#8211; VidyaGameMaka</title>
	<atom:link href="/author/vidya/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Godot C# Tutorials</description>
	<lastBuildDate>Sun, 12 Jan 2025 02:34:31 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.7.1</generator>
	<item>
		<title>Godot 4, VS Code &#038; .NET 8 Installation &#038; Configuration</title>
		<link>/godot4/godot-4-vs-code-net-8-installation/</link>
		
		<dc:creator><![CDATA[VidyaGameMaka]]></dc:creator>
		<pubDate>Fri, 10 Jan 2025 02:57:16 +0000</pubDate>
				<category><![CDATA[Godot 4 Standalone Tutorials]]></category>
		<category><![CDATA[Godot4]]></category>
		<guid isPermaLink="false">/?p=203</guid>

					<description><![CDATA[This is a brief tutorial covering installation of Godot 4 C# and required components. Godot 4 C# Installation Instructions .NET [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>This is a brief tutorial covering installation of Godot 4 C# and required components.</p>



<ul class="wp-block-list">
<li><a href="#Godot4CInstall" data-type="internal" data-id="#Godot4CInstall"><strong>Godot 4 C# Installation Instructions</strong></a>
<ul class="wp-block-list">
<li>Download: <a href="https://godotengine.org/">https://godotengine.org/</a></li>
</ul>
</li>



<li><strong><a href="#NETSDK" data-type="internal" data-id="#NETSDK">.NET SDK 8 Installation</a></strong>
<ul class="wp-block-list">
<li>Download: <a href="https://dotnet.microsoft.com/download">https://dotnet.microsoft.com/download</a></li>
</ul>
</li>



<li><strong><a href="#vscodeinstallation">VS Code Installation</a></strong>
<ul class="wp-block-list">
<li>Download: <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li>
</ul>
</li>



<li><strong><a href="#configurationvscode">Configuration of VS Code</a></strong></li>



<li><a href="#vscoderecommendedextensions"><strong>VS Code Recommended Additional Extensions</strong></a></li>



<li><a href="#godotconfigureexternaleditor"><strong>Godot &#8211; Configure Visual Studio Code as the External Editor</strong></a></li>



<li><a href="#godotcsolution"><strong>Godot &#8211; Create C# Solution</strong></a></li>



<li><strong><a href="#krstyle">VS Code Format Braces K&amp;R Style &#8211; Optional</a></strong></li>
</ul>



<hr class="wp-block-separator has-alpha-channel-opacity is-style-wide"/>



<p id="Godot4CInstall"><strong>Godot 4 C# Installation Instructions</strong></p>



<ul class="wp-block-list">
<li>Download Godot 4 .Net Version: <a href="https://godotengine.org/">https://godotengine.org/</a></li>



<li>Right click and choose Extract all Files</li>



<li>Create a folder on your C: drive and name it C:\GodotEditors</li>



<li>This is where all of your Godot editors can live.</li>



<li>Copy the entire folder you just extracted into this new folder.</li>



<li>Right Click on Godot_(v#.#.#)-stable_win64.exe and choose Create Shortcut</li>



<li>Copy this shortcut to your Desktop or pin it to your Start Menu or Taskbar, whichever you prefer.</li>
</ul>



<hr class="wp-block-separator has-alpha-channel-opacity is-style-wide"/>



<p id="NETSDK"><strong>.NET SDK 8 Installation</strong></p>



<p>As of the date of this article, Godot uses .NET SDK 8. It is the only SDK you need to have installed.</p>



<ul class="wp-block-list">
<li><strong>Download .NET 8 SDK:</strong> <a href="https://dotnet.microsoft.com/download">https://dotnet.microsoft.com/download</a></li>



<li>Install the .NET SDK with the default options.</li>



<li>No further configuration is required for .NET SDK.</li>
</ul>



<hr class="wp-block-separator has-alpha-channel-opacity is-style-wide"/>



<p id="vscodeinstallation"><strong>VS Code Installation</strong></p>



<ul class="wp-block-list">
<li>Download VS Code: <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li>



<li>It is easiest to install VS Code on a per-user basis. So the download file you received should be named:<br>VSCodeUserSetup-x64-(X.XX.X).exe</li>



<li>Choose the default install location.</li>



<li>Click next until you arrive at the Select Additional Tasks Window. <strong>Place a checkmark next to all of the additional tasks</strong>.</li>
</ul>



<figure class="wp-block-image size-large"><img fetchpriority="high" decoding="async" width="1024" height="815" src="/wp-content/uploads/2024/06/vscode-additional-tasks-1024x815.png" alt="" class="wp-image-205" srcset="/wp-content/uploads/2024/06/vscode-additional-tasks-1024x815.png 1024w, /wp-content/uploads/2024/06/vscode-additional-tasks-300x239.png 300w, /wp-content/uploads/2024/06/vscode-additional-tasks-768x611.png 768w, /wp-content/uploads/2024/06/vscode-additional-tasks.png 1296w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<ul class="wp-block-list">
<li>Click Next</li>



<li>Click Install</li>



<li>Installation of VS Code is completed</li>
</ul>



<hr class="wp-block-separator has-alpha-channel-opacity is-style-wide"/>



<p id="configurationvscode"><strong>Configuration of VS Code</strong></p>



<ul class="wp-block-list">
<li>Open Visual Studio Code</li>



<li>Click on the Extensions Button on the left side menu</li>
</ul>



<figure class="wp-block-image size-full"><img decoding="async" width="567" height="779" src="/wp-content/uploads/2024/06/vscode-extensions-menu.png" alt="" class="wp-image-207" srcset="/wp-content/uploads/2024/06/vscode-extensions-menu.png 567w, /wp-content/uploads/2024/06/vscode-extensions-menu-218x300.png 218w" sizes="(max-width: 567px) 100vw, 567px" /></figure>



<ul class="wp-block-list">
<li>In the Search Box type: <strong>C# Dev Kit</strong></li>



<li>Install <strong>C# Dev Kit</strong></li>
</ul>



<figure class="wp-block-image size-full"><img decoding="async" width="928" height="744" src="/wp-content/uploads/2024/06/vscode_c_dev_kit.png" alt="" class="wp-image-208" srcset="/wp-content/uploads/2024/06/vscode_c_dev_kit.png 928w, /wp-content/uploads/2024/06/vscode_c_dev_kit-300x241.png 300w, /wp-content/uploads/2024/06/vscode_c_dev_kit-768x616.png 768w" sizes="(max-width: 928px) 100vw, 928px" /></figure>



<hr class="wp-block-separator has-alpha-channel-opacity is-style-wide"/>



<p id="vscoderecommendedextensions"><strong>VS Code Recommended Additional Extensions:</strong></p>



<ul class="wp-block-list">
<li>IntelliCode for C# Dev Kit</li>



<li>C# Tools for Godot</li>



<li>EditorConfig for VS Code</li>



<li>Indent To Bracket</li>



<li>vscode-icons</li>
</ul>



<hr class="wp-block-separator has-alpha-channel-opacity is-style-wide"/>



<p id="godotconfigureexternaleditor"><strong>Godot &#8211; Configure Visual Studio Code as the External Editor</strong></p>



<ul class="wp-block-list">
<li>Open Godot. When you open Godot, it will open with the Project Manager.</li>



<li>Create a new project.</li>



<li>I recommend creating a folder on your root C: or other disk drive that you have to store your Godot Projects so that they are easy to locate and the folder path is short. Windows still has a limit of 255 characters for a path so storing a Godot project in your user folder (such as Desktop, Downloads, My Documents) is strongly discouraged! I have multiple hard drives on my system. C: drive holds my operating system and programs. D: Holds my project files. E: is my backup drive where I backup my files every night.
<ul class="wp-block-list">
<li>You may enable long path support in windows per this article:<br><a href="https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=registry">https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=registry</a></li>
</ul>
</li>



<li>Click on Browse.</li>



<li>Create a folder on your hard drive named D:\_GodotGames</li>



<li>Create a folder inside D:\_GodotGames and name it config</li>



<li>For Project name you can call it config, you can delete this project once you are finished configuring Godot.</li>



<li>Your Project Name and Project folder should be the same name.</li>



<li>When you are finished your dialogue window should look like below.</li>



<li>Click Create &amp; Edit (This will open Godot)</li>
</ul>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="632" src="/wp-content/uploads/2024/06/godot4config1-1024x632.png" alt="" class="wp-image-215" srcset="/wp-content/uploads/2024/06/godot4config1-1024x632.png 1024w, /wp-content/uploads/2024/06/godot4config1-300x185.png 300w, /wp-content/uploads/2024/06/godot4config1-768x474.png 768w, /wp-content/uploads/2024/06/godot4config1-1536x948.png 1536w, /wp-content/uploads/2024/06/godot4config1-2048x1265.png 2048w" sizes="auto, (max-width: 1024px) 100vw, 1024px" /></figure>



<ul class="wp-block-list">
<li>Click On: <strong>Editor -&gt; Editor Settings</strong></li>
</ul>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="227" src="/wp-content/uploads/2024/06/godot4editorsettings-1024x227.png" alt="" class="wp-image-216" srcset="/wp-content/uploads/2024/06/godot4editorsettings-1024x227.png 1024w, /wp-content/uploads/2024/06/godot4editorsettings-300x67.png 300w, /wp-content/uploads/2024/06/godot4editorsettings-768x171.png 768w, /wp-content/uploads/2024/06/godot4editorsettings.png 1031w" sizes="auto, (max-width: 1024px) 100vw, 1024px" /></figure>



<ul class="wp-block-list">
<li>Scroll the left menu to the very bottom. We are specifically looking for the <strong>Dotnet</strong> category then <strong>Editor</strong>.</li>



<li>Click on External Editor and choose: <strong>Visual Studio Code</strong></li>



<li><strong>Remove all text</strong> from <strong>Custom Exec Path Args</strong> if any are present</li>



<li>Click Close</li>
</ul>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="833" src="/wp-content/uploads/2024/06/godot4dotnetconfig-1024x833.png" alt="" class="wp-image-218" srcset="/wp-content/uploads/2024/06/godot4dotnetconfig-1024x833.png 1024w, /wp-content/uploads/2024/06/godot4dotnetconfig-300x244.png 300w, /wp-content/uploads/2024/06/godot4dotnetconfig-768x625.png 768w, /wp-content/uploads/2024/06/godot4dotnetconfig-1536x1249.png 1536w, /wp-content/uploads/2024/06/godot4dotnetconfig.png 1804w" sizes="auto, (max-width: 1024px) 100vw, 1024px" /></figure>



<hr class="wp-block-separator has-alpha-channel-opacity is-style-wide"/>



<p id="godotcsolution"><strong>Godot &#8211; Create C# Solution (May not be required.)</strong></p>



<p>By default Godot does not create a C# solution file when a new game project is created. This only needs to be done one time after the creation of a Godot project.</p>



<ul class="wp-block-list">
<li>To create a C# Solution click: <strong>Project -&gt; Tools -&gt; C# -&gt; Create C# solution</strong></li>
</ul>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="471" src="/wp-content/uploads/2024/06/godot4createsolution-1024x471.png" alt="" class="wp-image-219" srcset="/wp-content/uploads/2024/06/godot4createsolution-1024x471.png 1024w, /wp-content/uploads/2024/06/godot4createsolution-300x138.png 300w, /wp-content/uploads/2024/06/godot4createsolution-768x353.png 768w, /wp-content/uploads/2024/06/godot4createsolution-1536x706.png 1536w, /wp-content/uploads/2024/06/godot4createsolution.png 1658w" sizes="auto, (max-width: 1024px) 100vw, 1024px" /></figure>



<hr class="wp-block-separator has-alpha-channel-opacity is-style-wide"/>



<p id="krstyle"><strong>VS Code Format Braces K&amp;R Style (Optional)</strong></p>



<ul class="wp-block-list">
<li>Install the following extension in VS Code: <strong>EditorConfig for VS Code</strong></li>



<li>Open your Godot project in VS Code and create a new file named <strong>.editorconfig</strong></li>



<li>For the most current version of .editorconfig you can download it from:<br><a href="https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/code-style-rule-options">https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/code-style-rule-options</a></li>



<li>Search for: <strong>csharp_new_line_before_open_brace</strong> and change <strong>all</strong> to <strong>none</strong></li>



<li>Below I have provided my modified .editorconfig</li>
</ul>



<div class="wp-block-kevinbatdorf-code-block-pro cbp-has-line-numbers" data-code-block-pro-font-family="Code-Pro-JetBrains-Mono" style="font-size:.875rem;font-family:Code-Pro-JetBrains-Mono,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,monospace;--cbp-line-number-color:#d8dee9ff;--cbp-line-number-width:calc(3 * 0.6 * .875rem);--cbp-line-highlight-color:rgba(201, 218, 248, 0.2);line-height:1.25rem;--cbp-tab-width:2;tab-size:var(--cbp-tab-width, 2)"><span style="display:block;padding:16px 0 0 16px;margin-bottom:-1px;width:100%;text-align:left;background-color:#2e3440ff"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></span><span role="button" tabindex="0" data-code="# Remove the line below if you want to inherit .editorconfig settings from higher directories
root = true

[*.*]
charset = utf-8

# C# files
[*.cs]

#### Core EditorConfig Options ####

# Indentation and spacing
indent_size = 4
indent_style = space
tab_width = 4

# New line preferences
end_of_line = crlf
insert_final_newline = false

#### .NET Coding Conventions ####

# Organize usings
dotnet_separate_import_directive_groups = false
dotnet_sort_system_directives_first = false
file_header_template = unset

# this. and Me. preferences
dotnet_style_qualification_for_event = false
dotnet_style_qualification_for_field = false
dotnet_style_qualification_for_method = false
dotnet_style_qualification_for_property = false

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true
dotnet_style_predefined_type_for_member_access = true

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_operators = never_if_unnecessary
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members

# Expression-level preferences
dotnet_style_coalesce_expression = true
dotnet_style_collection_initializer = true
dotnet_style_explicit_tuple_names = true
dotnet_style_namespace_match_folder = true
dotnet_style_null_propagation = true
dotnet_style_object_initializer = true
dotnet_style_operator_placement_when_wrapping = beginning_of_line
dotnet_style_prefer_auto_properties = true
dotnet_style_prefer_collection_expression = when_types_loosely_match
dotnet_style_prefer_compound_assignment = true
dotnet_style_prefer_conditional_expression_over_assignment = true
dotnet_style_prefer_conditional_expression_over_return = true
dotnet_style_prefer_foreach_explicit_cast_in_source = when_strongly_typed
dotnet_style_prefer_inferred_anonymous_type_member_names = true
dotnet_style_prefer_inferred_tuple_names = true
dotnet_style_prefer_is_null_check_over_reference_equality_method = true
dotnet_style_prefer_simplified_boolean_expressions = true
dotnet_style_prefer_simplified_interpolation = true

# Field preferences
dotnet_style_readonly_field = true

# Parameter preferences
dotnet_code_quality_unused_parameters = all:silent

# Suppression preferences
dotnet_remove_unnecessary_suppression_exclusions = none

# New line preferences
dotnet_style_allow_multiple_blank_lines_experimental = true
dotnet_style_allow_statement_immediately_after_block_experimental = true

#### C# Coding Conventions ####

# var preferences
csharp_style_var_elsewhere = false
csharp_style_var_for_built_in_types = false
csharp_style_var_when_type_is_apparent = false

# Expression-bodied members
csharp_style_expression_bodied_accessors = true
csharp_style_expression_bodied_constructors = false
csharp_style_expression_bodied_indexers = true
csharp_style_expression_bodied_lambdas = true
csharp_style_expression_bodied_local_functions = false
csharp_style_expression_bodied_methods = false
csharp_style_expression_bodied_operators = false
csharp_style_expression_bodied_properties = true

# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true
csharp_style_pattern_matching_over_is_with_cast_check = true
csharp_style_prefer_extended_property_pattern = true
csharp_style_prefer_not_pattern = true
csharp_style_prefer_pattern_matching = true
csharp_style_prefer_switch_expression = true

# Null-checking preferences
csharp_style_conditional_delegate_call = true

# Modifier preferences
csharp_prefer_static_local_function = true
csharp_preferred_modifier_order = public,private,protected,internal,file,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,required,volatile,async
csharp_style_prefer_readonly_struct = true
csharp_style_prefer_readonly_struct_member = true

# Code-block preferences
csharp_prefer_braces = true
csharp_prefer_simple_using_statement = true
csharp_style_namespace_declarations = block_scoped
csharp_style_prefer_method_group_conversion = true
csharp_style_prefer_primary_constructors = true
csharp_style_prefer_top_level_statements = true

# Expression-level preferences
csharp_prefer_simple_default_expression = true
csharp_style_deconstructed_variable_declaration = true
csharp_style_implicit_object_creation_when_type_is_apparent = true
csharp_style_inlined_variable_declaration = true
csharp_style_prefer_index_operator = true
csharp_style_prefer_local_over_anonymous_function = true
csharp_style_prefer_null_check_over_type_check = true
csharp_style_prefer_range_operator = true
csharp_style_prefer_tuple_swap = true
csharp_style_prefer_utf8_string_literals = true
csharp_style_throw_expression = true
csharp_style_unused_value_assignment_preference = discard_variable
csharp_style_unused_value_expression_statement_preference = discard_variable

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace

# New line preferences
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = true
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = true
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = true
csharp_style_allow_embedded_statements_on_same_line_experimental = true

#### C# Formatting Rules ####

# New line preferences
csharp_new_line_before_catch = true
csharp_new_line_before_else = false
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = none
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true

#### Naming styles ####

# Naming rules

dotnet_naming_rule.interface_should_be_begins_with_i.severity = suggestion
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

# Symbol specifications

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers = 

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers = 

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers = 

# Naming styles

dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix = 
dotnet_naming_style.begins_with_i.word_separator = 
dotnet_naming_style.begins_with_i.capitalization = pascal_case" style="color:#d8dee9ff;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki nord" style="background-color: #2e3440ff" tabindex="0"><code><span class="line"><span style="color: #616E88"># Remove the line below if you want to inherit .editorconfig settings from higher directories</span></span>
<span class="line"><span style="color: #A3BE8C">root = true</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ECEFF4">[*</span><span style="color: #D8DEE9">.*</span><span style="color: #ECEFF4">]</span></span>
<span class="line"><span style="color: #A3BE8C">charset = utf-8</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># C# files</span></span>
<span class="line"><span style="color: #ECEFF4">[*</span><span style="color: #D8DEE9">.cs</span><span style="color: #ECEFF4">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88">#### Core EditorConfig Options ####</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># Indentation and spacing</span></span>
<span class="line"><span style="color: #A3BE8C">indent_size = 4</span></span>
<span class="line"><span style="color: #A3BE8C">indent_style = space</span></span>
<span class="line"><span style="color: #A3BE8C">tab_width = 4</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># New line preferences</span></span>
<span class="line"><span style="color: #A3BE8C">end_of_line = crlf</span></span>
<span class="line"><span style="color: #A3BE8C">insert_final_newline = false</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88">#### .NET Coding Conventions ####</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># Organize usings</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_separate_import_directive_groups = false</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_sort_system_directives_first = false</span></span>
<span class="line"><span style="color: #A3BE8C">file_header_template = unset</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># this. and Me. preferences</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_qualification_for_event = false</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_qualification_for_field = false</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_qualification_for_method = false</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_qualification_for_property = false</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># Language keywords vs BCL types preferences</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_predefined_type_for_locals_parameters_members = true</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_predefined_type_for_member_access = true</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># Parentheses preferences</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_parentheses_in_other_binary_operators = always_for_clarity</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_parentheses_in_other_operators = never_if_unnecessary</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># Modifier preferences</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_require_accessibility_modifiers = for_non_interface_members</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># Expression-level preferences</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_coalesce_expression = true</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_collection_initializer = true</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_explicit_tuple_names = true</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_namespace_match_folder = true</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_null_propagation = true</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_object_initializer = true</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_operator_placement_when_wrapping = beginning_of_line</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_prefer_auto_properties = true</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_prefer_collection_expression = when_types_loosely_match</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_prefer_compound_assignment = true</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_prefer_conditional_expression_over_assignment = true</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_prefer_conditional_expression_over_return = true</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_prefer_foreach_explicit_cast_in_source = when_strongly_typed</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_prefer_inferred_anonymous_type_member_names = true</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_prefer_inferred_tuple_names = true</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_prefer_is_null_check_over_reference_equality_method = true</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_prefer_simplified_boolean_expressions = true</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_prefer_simplified_interpolation = true</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># Field preferences</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_readonly_field = true</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># Parameter preferences</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_code_quality_unused_parameters = all:silent</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># Suppression preferences</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_remove_unnecessary_suppression_exclusions = none</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># New line preferences</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_allow_multiple_blank_lines_experimental = true</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_style_allow_statement_immediately_after_block_experimental = true</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88">#### C# Coding Conventions ####</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># var preferences</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_var_elsewhere = false</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_var_for_built_in_types = false</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_var_when_type_is_apparent = false</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># Expression-bodied members</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_expression_bodied_accessors = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_expression_bodied_constructors = false</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_expression_bodied_indexers = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_expression_bodied_lambdas = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_expression_bodied_local_functions = false</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_expression_bodied_methods = false</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_expression_bodied_operators = false</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_expression_bodied_properties = true</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># Pattern matching preferences</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_pattern_matching_over_as_with_null_check = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_pattern_matching_over_is_with_cast_check = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_prefer_extended_property_pattern = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_prefer_not_pattern = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_prefer_pattern_matching = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_prefer_switch_expression = true</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># Null-checking preferences</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_conditional_delegate_call = true</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># Modifier preferences</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_prefer_static_local_function = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_preferred_modifier_order = public,private,protected,internal,file,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,required,volatile,async</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_prefer_readonly_struct = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_prefer_readonly_struct_member = true</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># Code-block preferences</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_prefer_braces = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_prefer_simple_using_statement = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_namespace_declarations = block_scoped</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_prefer_method_group_conversion = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_prefer_primary_constructors = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_prefer_top_level_statements = true</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># Expression-level preferences</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_prefer_simple_default_expression = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_deconstructed_variable_declaration = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_implicit_object_creation_when_type_is_apparent = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_inlined_variable_declaration = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_prefer_index_operator = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_prefer_local_over_anonymous_function = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_prefer_null_check_over_type_check = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_prefer_range_operator = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_prefer_tuple_swap = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_prefer_utf8_string_literals = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_throw_expression = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_unused_value_assignment_preference = discard_variable</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_unused_value_expression_statement_preference = discard_variable</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># &#39;using&#39; directive preferences</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_using_directive_placement = outside_namespace</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># New line preferences</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_allow_blank_lines_between_consecutive_braces_experimental = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_style_allow_embedded_statements_on_same_line_experimental = true</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88">#### C# Formatting Rules ####</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># New line preferences</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_new_line_before_catch = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_new_line_before_else = false</span></span>
<span class="line cbp-line-highlight"><span style="color: #A3BE8C">csharp_new_line_before_finally = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_new_line_before_members_in_anonymous_types = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_new_line_before_members_in_object_initializers = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_new_line_before_open_brace = none</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_new_line_between_query_expression_clauses = true</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># Indentation preferences</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_indent_block_contents = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_indent_braces = false</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_indent_case_contents = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_indent_case_contents_when_block = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_indent_labels = one_less_than_current</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_indent_switch_labels = true</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># Space preferences</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_space_after_cast = false</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_space_after_colon_in_inheritance_clause = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_space_after_comma = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_space_after_dot = false</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_space_after_keywords_in_control_flow_statements = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_space_after_semicolon_in_for_statement = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_space_around_binary_operators = before_and_after</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_space_around_declaration_statements = false</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_space_before_colon_in_inheritance_clause = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_space_before_comma = false</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_space_before_dot = false</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_space_before_open_square_brackets = false</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_space_before_semicolon_in_for_statement = false</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_space_between_empty_square_brackets = false</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_space_between_method_call_empty_parameter_list_parentheses = false</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_space_between_method_call_name_and_opening_parenthesis = false</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_space_between_method_call_parameter_list_parentheses = false</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_space_between_method_declaration_empty_parameter_list_parentheses = false</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_space_between_method_declaration_name_and_open_parenthesis = false</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_space_between_method_declaration_parameter_list_parentheses = false</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_space_between_parentheses = false</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_space_between_square_brackets = false</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># Wrapping preferences</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_preserve_single_line_blocks = true</span></span>
<span class="line"><span style="color: #A3BE8C">csharp_preserve_single_line_statements = true</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88">#### Naming styles ####</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># Naming rules</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_rule.interface_should_be_begins_with_i.severity = suggestion</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_rule.types_should_be_pascal_case.severity = suggestion</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_rule.types_should_be_pascal_case.symbols = types</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = suggestion</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case</span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># Symbol specifications</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_symbols.interface.applicable_kinds = interface</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_symbols.interface.required_modifiers =</span><span style="color: #D8DEE9FF"> </span></span>
<span class="line"></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_symbols.types.required_modifiers =</span><span style="color: #D8DEE9FF"> </span></span>
<span class="line"></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_symbols.non_field_members.required_modifiers =</span><span style="color: #D8DEE9FF"> </span></span>
<span class="line"></span>
<span class="line"><span style="color: #616E88"># Naming styles</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_style.pascal_case.required_prefix =</span><span style="color: #D8DEE9FF"> </span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_style.pascal_case.required_suffix =</span><span style="color: #D8DEE9FF"> </span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_style.pascal_case.word_separator =</span><span style="color: #D8DEE9FF"> </span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_style.pascal_case.capitalization = pascal_case</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_style.begins_with_i.required_prefix = I</span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_style.begins_with_i.required_suffix =</span><span style="color: #D8DEE9FF"> </span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_style.begins_with_i.word_separator =</span><span style="color: #D8DEE9FF"> </span></span>
<span class="line"><span style="color: #A3BE8C">dotnet_naming_style.begins_with_i.capitalization = pascal_case</span></span></code></pre></div>



<p></p>



<p>This concludes this installation guide.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Godot 4 C# Main Screen Plugin</title>
		<link>/godot4/gd4tutorials/godot-4-c-main-screen-plugin/</link>
		
		<dc:creator><![CDATA[VidyaGameMaka]]></dc:creator>
		<pubDate>Wed, 07 Aug 2024 05:21:11 +0000</pubDate>
				<category><![CDATA[Godot 4 Standalone Tutorials]]></category>
		<guid isPermaLink="false">/?p=261</guid>

					<description><![CDATA[You may create a new project from scratch or use your Godot 4 existing project to follow along with this [&#8230;]]]></description>
										<content:encoded><![CDATA[
<iframe loading="lazy" width="1120" height="630" src="https://www.youtube.com/embed/fAR_DssAig8?si=yMU5G1bcpAXjoDpG" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>



<p>You may create a new project from scratch or use your Godot 4 existing project to follow along with this tutorial.</p>



<p>Please copy this code that has been copied and corrected from: <a href="https://docs.godotengine.org/en/stable/tutorials/plugins/editor/making_main_screen_plugins.html">https://docs.godotengine.org/en/stable/tutorials/plugins/editor/making_main_screen_plugins.html</a></p>



<div class="wp-block-kevinbatdorf-code-block-pro cbp-has-line-numbers" data-code-block-pro-font-family="Code-Pro-JetBrains-Mono" style="font-size:.875rem;font-family:Code-Pro-JetBrains-Mono,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,monospace;--cbp-line-number-color:#D4D4D4;--cbp-line-number-width:calc(2 * 0.6 * .875rem);line-height:1.25rem;--cbp-tab-width:2;tab-size:var(--cbp-tab-width, 2)"><span style="display:block;padding:16px 0 0 16px;margin-bottom:-1px;width:100%;text-align:left;background-color:#1E1E1E"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></span><span role="button" tabindex="0" data-code="#if TOOLS
using Godot;

[Tool]
public partial class MainScreenPlugin : EditorPlugin
{
    PackedScene MainPanel = ResourceLoader.Load&lt;PackedScene&gt;(&quot;res://addons/main_screen/main_panel.tscn&quot;);
    Control MainPanelInstance;

    public override void _EnterTree()
    {
        MainPanelInstance = (Control)MainPanel.Instantiate();
        // Add the main panel to the editor's main viewport.
        EditorInterface.Singleton.GetEditorMainScreen().AddChild(MainPanelInstance);
        // Hide the main panel. Very much required.
        _MakeVisible(false);
    }

    public override void _ExitTree()
    {
        if (MainPanelInstance != null)
        {
            MainPanelInstance.QueueFree();
        }
    }

    public override bool _HasMainScreen()
    {
        return true;
    }

    public override void _MakeVisible(bool visible)
    {
        if (MainPanelInstance != null)
        {
            MainPanelInstance.Visible = visible;
        }
    }

    public override string _GetPluginName()
    {
        return &quot;Main Screen Plugin&quot;;
    }

    public override Texture2D _GetPluginIcon()
    {
        // Must return some kind of Texture for the icon.
        return EditorInterface.Singleton.GetEditorTheme().GetIcon(&quot;Node&quot;, &quot;EditorIcons&quot;);
    }
}
#endif" style="color:#D4D4D4;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki dark-plus" style="background-color: #1E1E1E" tabindex="0"><code><span class="line"><span style="color: #569CD6">#if </span><span style="color: #9CDCFE">TOOLS</span></span>
<span class="line"><span style="color: #C586C0">using</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0">Godot</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">[</span><span style="color: #4EC9B0">Tool</span><span style="color: #D4D4D4">]</span></span>
<span class="line"><span style="color: #569CD6">public</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">partial</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">class</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0">MainScreenPlugin</span><span style="color: #D4D4D4"> : </span><span style="color: #4EC9B0">EditorPlugin</span></span>
<span class="line"><span style="color: #D4D4D4">{</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #4EC9B0">PackedScene</span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE">MainPanel</span><span style="color: #D4D4D4"> = </span><span style="color: #9CDCFE">ResourceLoader</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">Load</span><span style="color: #D4D4D4">&lt;</span><span style="color: #4EC9B0">PackedScene</span><span style="color: #D4D4D4">&gt;(</span><span style="color: #CE9178">&quot;res://addons/main_screen/main_panel.tscn&quot;</span><span style="color: #D4D4D4">);</span></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #4EC9B0">Control</span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE">MainPanelInstance</span><span style="color: #D4D4D4">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #569CD6">public</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">override</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">void</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA">_EnterTree</span><span style="color: #D4D4D4">()</span></span>
<span class="line"><span style="color: #D4D4D4">    {</span></span>
<span class="line"><span style="color: #D4D4D4">        </span><span style="color: #9CDCFE">MainPanelInstance</span><span style="color: #D4D4D4"> = (</span><span style="color: #4EC9B0">Control</span><span style="color: #D4D4D4">)</span><span style="color: #9CDCFE">MainPanel</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">Instantiate</span><span style="color: #D4D4D4">();</span></span>
<span class="line"><span style="color: #6A9955">        // Add the main panel to the editor&#39;s main viewport.</span></span>
<span class="line"><span style="color: #D4D4D4">        </span><span style="color: #9CDCFE">EditorInterface</span><span style="color: #D4D4D4">.</span><span style="color: #9CDCFE">Singleton</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">GetEditorMainScreen</span><span style="color: #D4D4D4">().</span><span style="color: #DCDCAA">AddChild</span><span style="color: #D4D4D4">(</span><span style="color: #9CDCFE">MainPanelInstance</span><span style="color: #D4D4D4">);</span></span>
<span class="line"><span style="color: #6A9955">        // Hide the main panel. Very much required.</span></span>
<span class="line"><span style="color: #D4D4D4">        </span><span style="color: #DCDCAA">_MakeVisible</span><span style="color: #D4D4D4">(</span><span style="color: #569CD6">false</span><span style="color: #D4D4D4">);</span></span>
<span class="line"><span style="color: #D4D4D4">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #569CD6">public</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">override</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">void</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA">_ExitTree</span><span style="color: #D4D4D4">()</span></span>
<span class="line"><span style="color: #D4D4D4">    {</span></span>
<span class="line"><span style="color: #D4D4D4">        </span><span style="color: #C586C0">if</span><span style="color: #D4D4D4"> (</span><span style="color: #9CDCFE">MainPanelInstance</span><span style="color: #D4D4D4"> != </span><span style="color: #569CD6">null</span><span style="color: #D4D4D4">)</span></span>
<span class="line"><span style="color: #D4D4D4">        {</span></span>
<span class="line"><span style="color: #D4D4D4">            </span><span style="color: #9CDCFE">MainPanelInstance</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">QueueFree</span><span style="color: #D4D4D4">();</span></span>
<span class="line"><span style="color: #D4D4D4">        }</span></span>
<span class="line"><span style="color: #D4D4D4">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #569CD6">public</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">override</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">bool</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA">_HasMainScreen</span><span style="color: #D4D4D4">()</span></span>
<span class="line"><span style="color: #D4D4D4">    {</span></span>
<span class="line"><span style="color: #D4D4D4">        </span><span style="color: #C586C0">return</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">true</span><span style="color: #D4D4D4">;</span></span>
<span class="line"><span style="color: #D4D4D4">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #569CD6">public</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">override</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">void</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA">_MakeVisible</span><span style="color: #D4D4D4">(</span><span style="color: #569CD6">bool</span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE">visible</span><span style="color: #D4D4D4">)</span></span>
<span class="line"><span style="color: #D4D4D4">    {</span></span>
<span class="line"><span style="color: #D4D4D4">        </span><span style="color: #C586C0">if</span><span style="color: #D4D4D4"> (</span><span style="color: #9CDCFE">MainPanelInstance</span><span style="color: #D4D4D4"> != </span><span style="color: #569CD6">null</span><span style="color: #D4D4D4">)</span></span>
<span class="line"><span style="color: #D4D4D4">        {</span></span>
<span class="line"><span style="color: #D4D4D4">            </span><span style="color: #9CDCFE">MainPanelInstance</span><span style="color: #D4D4D4">.</span><span style="color: #9CDCFE">Visible</span><span style="color: #D4D4D4"> = </span><span style="color: #9CDCFE">visible</span><span style="color: #D4D4D4">;</span></span>
<span class="line"><span style="color: #D4D4D4">        }</span></span>
<span class="line"><span style="color: #D4D4D4">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #569CD6">public</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">override</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">string</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA">_GetPluginName</span><span style="color: #D4D4D4">()</span></span>
<span class="line"><span style="color: #D4D4D4">    {</span></span>
<span class="line"><span style="color: #D4D4D4">        </span><span style="color: #C586C0">return</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&quot;Main Screen Plugin&quot;</span><span style="color: #D4D4D4">;</span></span>
<span class="line"><span style="color: #D4D4D4">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D4D4D4">    </span><span style="color: #569CD6">public</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">override</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0">Texture2D</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA">_GetPluginIcon</span><span style="color: #D4D4D4">()</span></span>
<span class="line"><span style="color: #D4D4D4">    {</span></span>
<span class="line"><span style="color: #6A9955">        // Must return some kind of Texture for the icon.</span></span>
<span class="line"><span style="color: #D4D4D4">        </span><span style="color: #C586C0">return</span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE">EditorInterface</span><span style="color: #D4D4D4">.</span><span style="color: #9CDCFE">Singleton</span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA">GetEditorTheme</span><span style="color: #D4D4D4">().</span><span style="color: #DCDCAA">GetIcon</span><span style="color: #D4D4D4">(</span><span style="color: #CE9178">&quot;Node&quot;</span><span style="color: #D4D4D4">, </span><span style="color: #CE9178">&quot;EditorIcons&quot;</span><span style="color: #D4D4D4">);</span></span>
<span class="line"><span style="color: #D4D4D4">    }</span></span>
<span class="line"><span style="color: #D4D4D4">}</span></span>
<span class="line"><span style="color: #569CD6">#endif</span></span></code></pre></div>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Godot 4 &#8211; Save/Load/Delete System Documentation</title>
		<link>/godot4/gd4tutorials/godot-4-save-load-delete-system-documentation/</link>
		
		<dc:creator><![CDATA[VidyaGameMaka]]></dc:creator>
		<pubDate>Mon, 01 Jul 2024 22:03:55 +0000</pubDate>
				<category><![CDATA[Godot 4 Standalone Tutorials]]></category>
		<guid isPermaLink="false">/?p=241</guid>

					<description><![CDATA[Table of Contents Setting up a Project Renaming the Project Gamebase Folder Structure]]></description>
										<content:encoded><![CDATA[
<h3 class="wp-block-heading">Table of Contents</h3>



<ul class="wp-block-list">
<li><a href="#set" data-type="internal" data-id="#set">Setting up a Project</a></li>



<li><a href="#renamingtheproject" data-type="internal" data-id="#renamingtheproject">Renaming the Project</a></li>



<li><a href="#gamebasefolderstructure">Gamebase Folder Structure</a></li>
</ul>



<p></p>



<hr class="wp-block-separator has-alpha-channel-opacity is-style-wide"/>



<h3 class="wp-block-heading" id="settingupaproject">Setting up a Project</h3>



<ul class="wp-block-list">
<li>Download the latest version from: <a href="https://github.com/VidyaGameMaka/GameBase_Godot4">https://github.com/VidyaGameMaka/GameBase_Godot4</a> </li>



<li>Click on the green code button and click Download Zip. You can also download the zip file using this direct link: <a href="https://github.com/VidyaGameMaka/GameBase_Godot4/archive/refs/heads/main.zip">https://github.com/VidyaGameMaka/GameBase_Godot4/archive/refs/heads/main.zip</a></li>



<li>Extract the Zip file into a folder where you store your Godot 4 game projects.</li>



<li>Open Godot 4. You must use the .NET version of Godot 4, have either <a href="/godot4/godot-4-vs-code-net-8-installation/" data-type="post" data-id="203">VS Code</a> or Visual Studio configured and .NET 8 installed.</li>



<li>Click Import then browse to where you extracted the files. Click on the project.godot file and click open.</li>



<li>Click Import &amp; Edit</li>
</ul>



<hr class="wp-block-separator has-alpha-channel-opacity is-style-wide"/>



<h3 class="wp-block-heading" id="renamingtheproject">Renaming the Project</h3>



<ul class="wp-block-list">
<li>On the top menu. Click <strong>Project</strong> -> <strong>Project Settings</strong></li>
</ul>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="888" height="737" src="/wp-content/uploads/2024/07/godot4gamebaseprojectsettingsmenu.png" alt="" class="wp-image-247" srcset="/wp-content/uploads/2024/07/godot4gamebaseprojectsettingsmenu.png 888w, /wp-content/uploads/2024/07/godot4gamebaseprojectsettingsmenu-300x249.png 300w, /wp-content/uploads/2024/07/godot4gamebaseprojectsettingsmenu-768x637.png 768w" sizes="auto, (max-width: 888px) 100vw, 888px" /></figure>



<ul class="wp-block-list">
<li>Click on the <strong>General </strong>Tab</li>



<li>On the left side Menu under the <strong>Application</strong> category click <strong>Config</strong></li>



<li>Change the <strong>Name </strong>field to the name you want your game to be named.</li>



<li>Click <strong>close</strong> to save your changes.</li>
</ul>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="388" src="/wp-content/uploads/2024/07/godot4gamebaseprojectname-1024x388.png" alt="" class="wp-image-248" srcset="/wp-content/uploads/2024/07/godot4gamebaseprojectname-1024x388.png 1024w, /wp-content/uploads/2024/07/godot4gamebaseprojectname-300x114.png 300w, /wp-content/uploads/2024/07/godot4gamebaseprojectname-768x291.png 768w, /wp-content/uploads/2024/07/godot4gamebaseprojectname-1536x581.png 1536w, /wp-content/uploads/2024/07/godot4gamebaseprojectname.png 1791w" sizes="auto, (max-width: 1024px) 100vw, 1024px" /></figure>



<hr class="wp-block-separator has-alpha-channel-opacity is-style-wide"/>



<h3 class="wp-block-heading" id="gamebasefolderstructure">Gamebase Folder Structure</h3>



<ul class="wp-block-list">
<li><strong>GameBase</strong> &#8211; The root of your primary game project. Other plugins and addons should be stored outside of GameBase.</li>
</ul>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="564" height="786" src="/wp-content/uploads/2024/07/godot4gamebasefolder1.png" alt="" class="wp-image-251" srcset="/wp-content/uploads/2024/07/godot4gamebasefolder1.png 564w, /wp-content/uploads/2024/07/godot4gamebasefolder1-215x300.png 215w" sizes="auto, (max-width: 564px) 100vw, 564px" /></figure>



<ul class="wp-block-list">
<li><strong>Audio</strong> &#8211; Where audio files should be stored. There are 3 folders inside the Audio folder:
<ul class="wp-block-list">
<li>Music</li>



<li>SFX</li>



<li>Voice</li>
</ul>
</li>



<li>The default_bus_layout is stored in the root of the Audio Folder. This file tells Godot how many busses your game has.</li>
</ul>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="903" height="657" src="/wp-content/uploads/2024/07/godot4gamebaseaudiofolder.png" alt="" class="wp-image-252" srcset="/wp-content/uploads/2024/07/godot4gamebaseaudiofolder.png 903w, /wp-content/uploads/2024/07/godot4gamebaseaudiofolder-300x218.png 300w, /wp-content/uploads/2024/07/godot4gamebaseaudiofolder-768x559.png 768w" sizes="auto, (max-width: 903px) 100vw, 903px" /></figure>



<ul class="wp-block-list">
<li><strong>AutoLoad</strong> &#8211; Contains scripts and godot scenes that are automatically loaded when the game is started. Gamebase comes preconfigured with the optimal autoload sequence.</li>
</ul>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="603" height="719" src="/wp-content/uploads/2024/07/godot4gamebaseautoloadfolder.png" alt="" class="wp-image-253" srcset="/wp-content/uploads/2024/07/godot4gamebaseautoloadfolder.png 603w, /wp-content/uploads/2024/07/godot4gamebaseautoloadfolder-252x300.png 252w" sizes="auto, (max-width: 603px) 100vw, 603px" /></figure>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Godot 4 C# OptionButton &#8212; Setup, Signals &#038; Unexpected Behaviour</title>
		<link>/godot4/godot-4-c-optionbutton-setup-signals-unexpected-behaviour/</link>
		
		<dc:creator><![CDATA[VidyaGameMaka]]></dc:creator>
		<pubDate>Sat, 22 Jun 2024 18:56:22 +0000</pubDate>
				<category><![CDATA[Godot 4 Standalone Tutorials]]></category>
		<category><![CDATA[Godot4]]></category>
		<guid isPermaLink="false">/?p=139</guid>

					<description><![CDATA[The OptionButton node offers the functionality of a drop-down list that allows a user to choose a single item from [&#8230;]]]></description>
										<content:encoded><![CDATA[
<iframe loading="lazy" width="1120" height="630" src="https://www.youtube.com/embed/Oe_KeKrHj6A?si=Y9B6bxuZXysSLtRh" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>



<p>The OptionButton node offers the functionality of a drop-down list that allows a user to choose a single item from that list. However, in Godot, the way it works is not the way it seems.</p>



<p>While I was doing my job I ran into unexpected behaviour of Godot&#8217;s OptionButton. The OptionButton didn&#8217;t send the ID I assigned! It send the index number of the option in the list.</p>



<p>We&#8217;ll setup a small demo scene with a CanvasLayer, Control, and add an OptionButton on top. We&#8217;ll add a few entries to the OptionButton using code because that is how most people will use it.</p>



<p>Then we&#8217;ll setup a signal to the script to see what the output of each option is. Last, I will show you how to make the OptionButton behave in a way that will provide the expected outcome.</p>



<p>Code and project is available for download: <a href="https://github.com/VidyaGameMaka/godot4tutorial/tree/main/optionbuttontest">https://github.com/VidyaGameMaka/godot4tutorial/tree/main/optionbuttontest</a></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Godot 4 C# Tutorial #11 : Complete Non-Positional Audio for 2D Games</title>
		<link>/godot4/godot-4-c-tutorial-11-complete-non-positional-audio-for-2d-games/</link>
		
		<dc:creator><![CDATA[VidyaGameMaka]]></dc:creator>
		<pubDate>Sat, 22 Jun 2024 18:54:04 +0000</pubDate>
				<category><![CDATA[Godot 4 Save / Load / Delete Series]]></category>
		<category><![CDATA[Godot4]]></category>
		<guid isPermaLink="false">/?p=136</guid>

					<description><![CDATA[For the 2D games that I make it makes the most sense to me to have an Audio System that [&#8230;]]]></description>
										<content:encoded><![CDATA[
<iframe loading="lazy" width="1120" height="630" src="https://www.youtube.com/embed/6ysvai7a_6k?si=fetOysOtC9wxBm7N" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>



<p>For the 2D games that I make it makes the most sense to me to have an Audio System that is non-positional. What this means is that the sound source is only in one place and the volume of the sound emitted from that source is the same throughout the entire game. This works well for my purposes. If you feel the need to do positional audio in 2D or espcially important in 3D you will need to utilize a different system. However, a lot of the code will be similar but you will need to do extra work to get positional audio setup in your project.</p>



<p>The node AudioStreamPlayer plays non-positional audio and does not require an AudioListener node.</p>



<p>In this project the following has been created as a automatically loaded scene: Scene: Snd_PFB and Script: Snd.cs &#8211; Sound Manager, This will be a very short name as I prefer to keep it short because it will be called frequently. instance will be just inst for the singleton for the script to further make the call shorter.</p>



<p>The following will be in the Sound Manager (Snd_PFB) scene.</p>



<ul class="wp-block-list">
<li>1 AudioStreamPlayer &#8211; Music</li>



<li>1 AudioStreamPlayer &#8211; Voice</li>



<li>1 AudioStreamPlayer &#8211; Male</li>



<li>1 AudioStreamPlayer &#8211; Female</li>



<li>15 AudioStreamPlayer &#8211; SFX (This will allow us to play up to 15 different sound effects simultaneously.)</li>
</ul>



<p><img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f31f.png" alt="🌟" class="wp-smiley" style="height: 1em; max-height: 1em;" /><strong>Tutorial Links</strong> <img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f31f.png" alt="🌟" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>



<p>Download files for this tutorial from github: <a href="https://github.com/VidyaGameMaka/godot4tutorial">https://github.com/VidyaGameMaka/godot4tutorial</a></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Godot 4 C# Tutorial #10 : Video Menu</title>
		<link>/godot4/godot-4-c-tutorial-10-video-menu/</link>
		
		<dc:creator><![CDATA[VidyaGameMaka]]></dc:creator>
		<pubDate>Sat, 22 Jun 2024 18:49:21 +0000</pubDate>
				<category><![CDATA[Godot 4 Save / Load / Delete Series]]></category>
		<category><![CDATA[Godot4]]></category>
		<guid isPermaLink="false">/?p=132</guid>

					<description><![CDATA[In this tutorial I am going to dicuss Godot&#8217;s video modes and what I think will be the best Video [&#8230;]]]></description>
										<content:encoded><![CDATA[
<iframe loading="lazy" width="1120" height="630" src="https://www.youtube.com/embed/KddyACwDh8E?si=4RtbuYMivBigp_16" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>



<p>In this tutorial I am going to dicuss Godot&#8217;s video modes and what I think will be the best Video Menu for 2D games. Programming the Video menu was pretty technical so I will be doing an explanation of the completed system instead of live coding in this video.</p>



<p>I have the Video menu all hooked up to the main menu and it is ready to go. After that the initial settings from GameData need to be applied to the game on start. So the following methods have been moved or implemented into GameMaster.</p>



<ul class="wp-block-list">
<li>Initialization of Video Settings</li>



<li>Audio Bus Index Setup</li>



<li>Initialization of Audio Settings</li>
</ul>



<p>The application of the Video settings is handled by GameMaster so that GameMaster and VideoMenu can both apply video settings using one method.</p>



<p>The Audio Bus index assignment has been moved to GameMaster so that the code is only written one time but will be able to be used by both GameMaster and AudioMenu.</p>



<p><img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f31f.png" alt="🌟" class="wp-smiley" style="height: 1em; max-height: 1em;" /><strong>Tutorial Links</strong> <img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f31f.png" alt="🌟" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>



<p>Download the Godot Project Tutorial #10 from my github: <a href="https://github.com/VidyaGameMaka/godot4tutorial">https://github.com/VidyaGameMaka/godot4tutorial</a></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Godot 4 C# Tutorial #9 : Menu Switcher</title>
		<link>/godot4/godot-4-c-tutorial-9-menu-switcher/</link>
		
		<dc:creator><![CDATA[VidyaGameMaka]]></dc:creator>
		<pubDate>Sat, 22 Jun 2024 18:46:01 +0000</pubDate>
				<category><![CDATA[Godot 4 Save / Load / Delete Series]]></category>
		<category><![CDATA[Godot4]]></category>
		<guid isPermaLink="false">/?p=129</guid>

					<description><![CDATA[Welcome back to another awesome C# godot tutorial with Vidya! So far we&#8217;ve created a great save, load, delete sytem, [&#8230;]]]></description>
										<content:encoded><![CDATA[
<iframe loading="lazy" width="1120" height="630" src="https://www.youtube.com/embed/JOU8gWWBH3E?si=GHAIkc-rf3DHoI9J" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>



<p>Welcome back to another awesome C# godot tutorial with Vidya! So far we&#8217;ve created a great save, load, delete sytem, menu and audio menu. Now that we have two menus on our main menu it&#8217;s time to introduce a way to switch between them.</p>



<p><img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f31f.png" alt="🌟" class="wp-smiley" style="height: 1em; max-height: 1em;" /><strong>Tutorial Links</strong> <img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f31f.png" alt="🌟" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>



<p>To follow along you can download the previous lesson&#8217;s files, lesson 6: <a href="https://github.com/VidyaGameMaka/godot4tutorial">https://github.com/VidyaGameMaka/godot4tutorial</a></p>



<p>If you want to follow-along with this lesson completed please use lesson 9&#8217;s files.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Godot 4 C# Tutorial #8 : Save File Obfuscation (Optional / Recommend Skipping)</title>
		<link>/godot4/godot-4-c-tutorial-8-save-file-obfuscation-optional-recommend-skipping/</link>
		
		<dc:creator><![CDATA[VidyaGameMaka]]></dc:creator>
		<pubDate>Sat, 22 Jun 2024 18:43:09 +0000</pubDate>
				<category><![CDATA[Godot 4 Standalone Tutorials]]></category>
		<category><![CDATA[Godot4]]></category>
		<guid isPermaLink="false">/?p=126</guid>

					<description><![CDATA[I recommend skipping this tutorial as it does more harm than good for your game development uses. If you&#8217;re interested [&#8230;]]]></description>
										<content:encoded><![CDATA[
<iframe loading="lazy" width="1120" height="630" src="https://www.youtube.com/embed/FWX72RW3Cag?si=DGkKwNf0LCZNWk4r" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>



<p>I recommend skipping this tutorial as it does more harm than good for your game development uses. If you&#8217;re interested in just learning a little bit about computer security, then that&#8217;s fine otherwise just jump to the next video. Thank you.</p>



<p>I had a question concerning protecting the save files we were making in Godot to prevent the end-user from modifying them. Many Unity save file tutorials utilize using BinaryFormatter, but Microsoft recommends against using it because it is insecure. BinaryFormatter exposes your users to an attack vector where sharing save files can lead to sharing viruses and malicious code injected by a malicious third party. Your game players will share your save files, so do it safely by just saving text files!</p>



<p>I&#8217;ve been a game dev for almost a decade. I&#8217;m all about providing a superior experience to my customers. DRM implementations and most obfuscation only serve to hurt you and your customers.</p>



<p>I decided to pull up my old tried and true bit flipper that I have used in the past to protect save files. While the script is named SimpleEncryptDecrypt, it is just a simple bit flipper. Since it is just flipping bits, the method, EncryptDecrypt is used for both saving and loading data. This makes for a very simple way to obfuscate the JSON string we&#8217;re using into something completely unintelligible for a human but trivial for a computer to read and write.</p>



<p>The &#8220;protection&#8221; this offers is honestly completely nonexistent if approached by an experienced programmer since C# compiles to CIL (C# Intermediary Language). It is easily read and modified by CheatEngine or DotNetPeek. This will only stop beginners and non-programmers from editing their save files. An experienced programmer will defeat this obfuscation in a minute or two so the benefit it offers is basically none and only serves to make your diagnostics of save files more difficult during development. Even if you implement SHA1 or other &#8220;real&#8221; encryption method for your save files, it does not matter because C# does not truly compile down to binary code and your secret key will be discovered. An experienced programmer can read binary code therefore all programs ever written are readable anyways.</p>



<p><img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f31f.png" alt="🌟" class="wp-smiley" style="height: 1em; max-height: 1em;" /><strong>Tutorial Links</strong> <img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f31f.png" alt="🌟" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>



<p>Download SimpleEncryptDecrypt script from my Github: <a href="https://github.com/VidyaGameMaka/godot4tutorial/blob/main/Tutorial6_AudioMenu/Scripts/Main/Tools/SimpleEncryptDecrypt.cs">https://github.com/VidyaGameMaka/godot4tutorial/blob/main/Tutorial6_AudioMenu/Scripts/Main/Tools/SimpleEncryptDecrypt.cs</a></p>



<p><strong>Usage: </strong></p>



<pre class="wp-block-code"><code>String myString = SimpleEncryptDecrypt.EncryptDecrypt(myString);</code></pre>



<p>If you use this method to save your file, you must also use it when you load your file immediately after loading the file contents from the file system.1</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Godot 4 C# Tutorial #7 : How did Vidya figure out Godot C# stuff so fast?</title>
		<link>/godot4/godot-4-c-tutorial-7-how-did-vidya-figure-out-godot-c-stuff-so-fast/</link>
		
		<dc:creator><![CDATA[VidyaGameMaka]]></dc:creator>
		<pubDate>Sat, 22 Jun 2024 18:36:10 +0000</pubDate>
				<category><![CDATA[Godot 4 Standalone Tutorials]]></category>
		<category><![CDATA[Godot4]]></category>
		<guid isPermaLink="false">/?p=124</guid>

					<description><![CDATA[Alright, let&#8217;s do a little situation exercise. You&#8217;ve come from a background using Unity for the last five years or [&#8230;]]]></description>
										<content:encoded><![CDATA[
<iframe loading="lazy" width="1120" height="630" src="https://www.youtube.com/embed/_PANRMJoIRE?si=xWX-yzXKf5Wzb6ic" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>



<p>Alright, let&#8217;s do a little situation exercise. You&#8217;ve come from a background using Unity for the last five years or more. Imagine that you have been tasked to provide information and tutorials for your co-workers about how to use Godot and C# as the scripting language.</p>



<p>So, you set off on your way looking up tutorials but the majority of them are written in GDscript. When trying to write an equivalent script in C# you keep on having difficulty accessing some of the methods that are just given in GDscript, for example changing the audio volume using a float from 0 to 1 in GDScript is linear_to_db but C# is Mathf.LinearToDb? What&#8217;s up with that?</p>



<p>In this tutorial I reveal my secrets about how I am so quickly learning Godot and doing it in C#. It may feel like C# has forsaken you until you realize one thing. Vidya&#8217;s secret! You need to Read The Manual!</p>



<p>Particularly, I found it very helpful to read through the following documents:</p>



<p>Cross Language Scripting: <a href="https://docs.godotengine.org/en/stable/tutorials/scripting/cross_language_scripting.html">https://docs.godotengine.org/en/stable/tutorials/scripting/cross_language_scripting.html</a></p>



<p>C# API differences to GDScript: <a href="https://docs.godotengine.org/en/stable/tutorials/scripting/c_sharp/c_sharp_differences.html">https://docs.godotengine.org/en/stable/tutorials/scripting/c_sharp/c_sharp_differences.html</a></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Godot 4 C# Tutorial #6 : Audio Menu</title>
		<link>/godot4/119/</link>
		
		<dc:creator><![CDATA[VidyaGameMaka]]></dc:creator>
		<pubDate>Sat, 22 Jun 2024 18:30:19 +0000</pubDate>
				<category><![CDATA[Godot 4 Save / Load / Delete Series]]></category>
		<category><![CDATA[Godot4]]></category>
		<guid isPermaLink="false">/?p=119</guid>

					<description><![CDATA[In this tutorial we do an overview of the Audio Menu. I show how to setup Godot&#8217;s Audio Bus, change [&#8230;]]]></description>
										<content:encoded><![CDATA[
<iframe loading="lazy" width="1120" height="630" src="https://www.youtube.com/embed/1RkKUIKadpI?si=gSwQRCTSjiMPxTBq" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>



<p>In this tutorial we do an overview of the Audio Menu. I show how to setup Godot&#8217;s Audio Bus, change audio bus volumes with Godot&#8217;s HSlider and show the end-user the Volume between 0 and 100 on the label.</p>



<p>Download this tutorial&#8217;s complete code from my github repo:</p>



<p><img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f31f.png" alt="🌟" class="wp-smiley" style="height: 1em; max-height: 1em;" /><strong>Tutorial Links</strong> <img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f31f.png" alt="🌟" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>



<p><a href="https://github.com/VidyaGameMaka/godot4tutorial">https://github.com/VidyaGameMaka/godot4tutorial</a></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Godot 4 C# Tutorial #5 : Animate like a Unity Programmer</title>
		<link>/godot4/godot-4-c-tutorial-5-animating-like-a-unity-programmer/</link>
		
		<dc:creator><![CDATA[VidyaGameMaka]]></dc:creator>
		<pubDate>Sat, 22 Jun 2024 18:16:10 +0000</pubDate>
				<category><![CDATA[Godot 4 Standalone Tutorials]]></category>
		<category><![CDATA[Godot4]]></category>
		<guid isPermaLink="false">/?p=107</guid>

					<description><![CDATA[To get started we will need some sprites or sprite-sheets. I have created sprite-sheets specifically for use in Godot which [&#8230;]]]></description>
										<content:encoded><![CDATA[
<iframe loading="lazy" width="1120" height="630" src="https://www.youtube.com/embed/nwbJ6gdeiHc?si=-WZHzvD96JfNZUq7" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>



<p>To get started we will need some sprites or sprite-sheets. I have created sprite-sheets specifically for use in Godot which can be downloaded from my GIT repo. You can use your own sprite-sheets also.</p>



<p><img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f31f.png" alt="🌟" class="wp-smiley" style="height: 1em; max-height: 1em;" /><strong>Tutorial Links</strong> <img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f31f.png" alt="🌟" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>



<p>Dino Images Zip: <a href="https://github.com/VidyaGameMaka/godot4tutorial/blob/main/FreeArt/DinoCharacter/FreeDinoSprite.zip">https://github.com/VidyaGameMaka/godot4tutorial/blob/main/FreeArt/DinoCharacter/FreeDinoSprite.zip</a></p>



<p>If you are not following along with the previous tutorials that is fine, this is a standalone tutorial.<br>Drag the sprite sheets into:<br>Prefabs/Characters/Dino</p>



<p>Create a new node and call it: DinoPlayer_PFB</p>



<p>In folder: Prefabs/Characters/Dino</p>



<ul class="wp-block-list">
<li>CharacterBody2D
<ul class="wp-block-list">
<li>Sprite</li>



<li>CollisionShape2D</li>



<li>AnimationPlayer</li>
</ul>
</li>
</ul>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
